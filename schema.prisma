generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------
// Enums
// -----------------------------------------------------------

enum UserRole {
  CREATOR   // Dono do sistema (Fernando)
  ADMIN     // Dono da imobili√°ria
  AGENT     // Corretor
}

enum PropertyType {
  APARTMENT
  HOUSE
  COMMERCIAL
  LAND
  OTHER
}

enum PropertyStatus {
  AVAILABLE
  SOLD
  RESERVED
}

enum ContactCategory {
  CLIENT
  LEAD
  PARTNER
}

enum ContactStatus {
  ACTIVE
  NEW
  INACTIVE
}

enum AppointmentType {
  VISIT
  MEETING
  CALL
  OTHER
}

enum AppointmentStatus {
  CONFIRMED
  PENDING
  COMPLETED
  CANCELED
}

enum DealStage {
  LEAD_IN
  QUALIFICATION
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

enum ActivityType {
  USER_CREATED
  PROPERTY_CREATED
  PROPERTY_UPDATED
  PROPERTY_DELETED
  CONTACT_CREATED
  CONTACT_UPDATED
  CONTACT_DELETED
  APPOINTMENT_SCHEDULED
  APPOINTMENT_UPDATED
  APPOINTMENT_CANCELED
  DEAL_CREATED
  DEAL_UPDATED
  DEAL_CLOSED
  CHAT_MESSAGE_SENT
}

// -----------------------------------------------------------
// Models
// -----------------------------------------------------------

model Company {
  id        String   @id @default(uuid())
  name      String
  active    Boolean  @default(true)
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  password     String
  name         String
  role         UserRole   @default(AGENT)
  isActive     Boolean    @default(true)
  companyId    String
  company      Company    @relation(fields: [companyId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  properties   Property[]
  contacts     Contact[]
  appointments Appointment[]
  deals        Deal[]
  activities   Activity[]
  messages     Message[]
  chats        Chat[]     @relation("ChatOwner")
}

model Property {
  id             String         @id @default(uuid())
  title          String
  description    String?
  address        String
  city           String
  state          String
  zipCode        String
  price          Decimal
  area           Float
  bedrooms       Int?
  bathrooms      Int?
  type           PropertyType   @default(HOUSE)
  status         PropertyStatus @default(AVAILABLE)
  characteristics Json?
  images         String[]

  agentId        String
  agent          User           @relation(fields: [agentId], references: [id])

  appointments   Appointment[]
  deals          Deal[]

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Contact {
  id            String          @id @default(uuid())
  name          String
  email         String?         @unique
  phone         String?
  category      ContactCategory @default(LEAD)
  status        ContactStatus   @default(NEW)
  lastContactAt DateTime?
  avatarUrl     String?

  agentId       String
  agent         User            @relation(fields: [agentId], references: [id])

  appointments  Appointment[]
  deals         Deal[]
  chats         Chat[]          @relation("ContactChat")

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Appointment {
  id          String           @id @default(uuid())
  title       String
  description String?
  date        DateTime
  type        AppointmentType  @default(VISIT)
  status      AppointmentStatus @default(PENDING)

  agentId     String
  agent       User             @relation(fields: [agentId], references: [id])

  contactId   String
  contact     Contact          @relation(fields: [contactId], references: [id])

  propertyId  String?
  property    Property?        @relation(fields: [propertyId], references: [id])

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Deal {
  id                String    @id @default(uuid())
  title             String
  value             Decimal
  stage             DealStage @default(LEAD_IN)
  status            String    @default("ACTIVE")
  expectedCloseDate DateTime?
  closedAt          DateTime?

  propertyId        String
  property          Property  @relation(fields: [propertyId], references: [id])

  clientId          String
  client            Contact   @relation(fields: [clientId], references: [id])

  agentId           String
  agent             User      @relation(fields: [agentId], references: [id])

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Activity {
  id          String       @id @default(uuid())
  type        ActivityType
  description String
  entityId    String?
  entityType  String?

  userId      String
  user        User         @relation(fields: [userId], references: [id])

  createdAt   DateTime     @default(now())
}

model Chat {
  id         String   @id @default(uuid())
  contactId  String
  contact    Contact  @relation("ContactChat", fields: [contactId], references: [id])

  agentId    String
  agent      User     @relation("ChatOwner", fields: [agentId], references: [id])

  messages   Message[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  content   String
  sentAt    DateTime @default(now())
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
}