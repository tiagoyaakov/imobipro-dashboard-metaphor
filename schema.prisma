generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------
// Enums
// -----------------------------------------------------------

enum UserRole {
  CREATOR   // Dono do sistema (Fernando)
  ADMIN     // Dono da imobiliária
  AGENT     // Corretor
}

enum PropertyType {
  APARTMENT
  HOUSE
  COMMERCIAL
  LAND
  OTHER
}

enum PropertyStatus {
  AVAILABLE
  SOLD
  RESERVED
}

enum ContactCategory {
  CLIENT
  LEAD
  PARTNER
}

enum ContactStatus {
  ACTIVE
  NEW
  INACTIVE
}

// === NOVOS ENUMS PARA MÓDULO CLIENTES ===

enum LeadStage {
  NEW           // Novo lead
  CONTACTED     // Contatado
  QUALIFIED     // Qualificado
  INTERESTED    // Interessado
  NEGOTIATING   // Negociando
  CONVERTED     // Convertido
  LOST          // Perdido
}

enum CampaignStatus {
  DRAFT         // Rascunho
  SCHEDULED     // Agendada
  RUNNING       // Executando
  PAUSED        // Pausada
  COMPLETED     // Concluída
  CANCELLED     // Cancelada
}

enum LeadActivityType {
  CALL          // Ligação
  EMAIL         // Email
  WHATSAPP      // WhatsApp
  MEETING       // Reunião
  VISIT         // Visita
  SMS           // SMS
  FOLLOW_UP     // Follow-up
  NOTE          // Anotação
  PROPOSAL_SENT // Proposta enviada
  CONTRACT_SENT // Contrato enviado
  DOCUMENT_RECEIVED // Documento recebido
  PAYMENT_RECEIVED  // Pagamento recebido
}

enum AppointmentType {
  VISIT
  MEETING
  CALL
  OTHER
}

enum AppointmentStatus {
  CONFIRMED
  PENDING
  COMPLETED
  CANCELED
}

enum DealStage {
  LEAD_IN
  QUALIFICATION
  PROPOSAL
  NEGOTIATION
  WON
  LOST
}

enum ActivityType {
  USER_CREATED
  PROPERTY_CREATED
  PROPERTY_UPDATED
  PROPERTY_DELETED
  CONTACT_CREATED
  CONTACT_UPDATED
  CONTACT_DELETED
  APPOINTMENT_SCHEDULED
  APPOINTMENT_UPDATED
  APPOINTMENT_CANCELED
  DEAL_CREATED
  DEAL_UPDATED
  DEAL_CLOSED
  CHAT_MESSAGE_SENT
}

// === NOVOS ENUMS PARA MÓDULO AGENDA ===

enum SlotStatus {
  AVAILABLE   // Disponível para agendamento
  BOOKED      // Agendado com confirmação
  BLOCKED     // Bloqueado manualmente
  PENDING     // Aguardando confirmação
  CANCELLED   // Cancelado
  TENTATIVE   // Tentativo (sincronização)
}

enum SlotType {
  REGULAR     // Agendamento regular
  URGENT      // Agendamento urgente
  FOLLOW_UP   // Follow-up de cliente
  VIEWING     // Visita a imóvel
  MEETING     // Reunião interna
  BREAK       // Intervalo/almoço
}

enum SyncStatus {
  PENDING     // Aguardando sincronização
  SYNCING     // Sincronizando
  SYNCED      // Sincronizado
  FAILED      // Falha na sincronização
  CONFLICT    // Conflito detectado
}

enum SyncDirection {
  TO_GOOGLE       // ImobiPRO → Google
  FROM_GOOGLE     // Google → ImobiPRO  
  BIDIRECTIONAL   // Ambos os sentidos
}

enum SyncOperation {
  CREATE
  UPDATE
  DELETE
  SYNC_CHECK
}

enum SyncLogStatus {
  SUCCESS
  FAILED
  RETRYING
  CANCELLED
}

enum AutomationTrigger {
  N8N_WEBHOOK     // Criado via webhook n8n
  WHATSAPP_BOT    // Criado via bot WhatsApp
  CALENDAR_SYNC   // Criado via sincronização
  AUTO_ASSIGNMENT // Criado por atribuição automática
  MANUAL_CREATION // Criado manualmente
}

enum ConflictType {
  TIME_OVERLAP    // Sobreposição de horários
  DOUBLE_BOOKING  // Duplo agendamento
  SYNC_MISMATCH   // Dados divergentes entre sistemas
  AVAILABILITY    // Conflito de disponibilidade
}

enum ConflictSource {
  GOOGLE_CALENDAR
  N8N_WORKFLOW
  MANUAL_EDIT
  AUTO_ASSIGNMENT
}

enum ConflictStrategy {
  LATEST_WINS     // Última modificação prevalece
  IMOBIPRO_WINS   // ImobiPRO prevalece
  GOOGLE_WINS     // Google Calendar prevalece
  MANUAL_REVIEW   // Revisão manual necessária
}

enum ConflictResolution {
  AUTO_RESOLVED   // Resolvido automaticamente
  MANUAL_RESOLVED // Resolvido manualmente
  ESCALATED       // Escalado para supervisor
  PENDING         // Aguardando resolução
}

enum AppointmentSource {
  MANUAL          // Criado manualmente
  WHATSAPP        // Criado via WhatsApp
  N8N_AUTOMATION  // Criado via n8n
  GOOGLE_CALENDAR // Importado do Google Calendar
  API_INTEGRATION // Criado via API externa
  BULK_IMPORT     // Importado em lote
}

enum AppointmentPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum N8nTriggerType {
  WEBHOOK         // Webhook de entrada
  SCHEDULE        // Agendamento/cron
  MANUAL          // Execução manual
  EVENT_DRIVEN    // Baseado em eventos
}

enum N8nExecutionStatus {
  RUNNING
  SUCCESS
  FAILED
  CANCELLED
  WAITING
}

// === NOVOS ENUMS PARA MÓDULO CONEXÕES ===

enum WhatsAppStatus {
  CONNECTED
  DISCONNECTED
  CONNECTING
  ERROR
  QR_CODE_PENDING
}

enum ConnectionAction {
  CONNECT
  DISCONNECT
  QR_GENERATED
  ERROR
  RECONNECT
}

enum MessageType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
  DOCUMENT
  LOCATION
  STICKER
  CONTACT
}

// -----------------------------------------------------------
// Models
// -----------------------------------------------------------

model Company {
  id        String   @id @default(uuid())
  name      String
  active    Boolean  @default(true)
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Novos relacionamentos para módulo agenda
  n8nWorkflowConfigs N8nWorkflowConfig[]

  // Novos relacionamentos para módulo conexões
  whatsappConfig     WhatsAppConfig? @relation("CompanyWhatsAppConfig")
}

model User {
  id           String     @id @default(uuid())
  email        String     @unique
  password     String
  name         String
  role         UserRole   @default(AGENT)
  isActive     Boolean    @default(true)
  companyId    String
  company      Company    @relation(fields: [companyId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relacionamentos existentes
  properties   Property[]
  contacts     Contact[]
  appointments Appointment[]
  deals        Deal[]
  activities   Activity[]
  messages     Message[]
  chats        Chat[]     @relation("ChatOwner")

  // Novos relacionamentos para módulo agenda
  agentSchedule              AgentSchedule?
  availabilitySlots          AvailabilitySlot[]
  googleCalendarCredentials  GoogleCalendarCredentials?
  n8nWorkflowConfigs         N8nWorkflowConfig[]

  // Novos relacionamentos para módulo clientes
  createdCampaigns           MessageCampaign[]  @relation("CampaignCreator")
  performedActivities        LeadActivity[]     @relation("ActivityPerformer")

  // Novos relacionamentos para módulo conexões
  whatsappInstance           WhatsAppInstance?  @relation("AgentWhatsAppInstances")
}

model Property {
  id             String         @id @default(uuid())
  title          String
  description    String?
  address        String
  city           String
  state          String
  zipCode        String
  price          Decimal
  area           Float
  bedrooms       Int?
  bathrooms      Int?
  type           PropertyType   @default(HOUSE)
  status         PropertyStatus @default(AVAILABLE)
  characteristics Json?
  images         String[]

  agentId        String
  agent          User           @relation(fields: [agentId], references: [id])

  appointments   Appointment[]
  deals          Deal[]

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Contact {
  id            String          @id @default(uuid())
  name          String
  email         String?         @unique
  phone         String?
  category      ContactCategory @default(LEAD)
  status        ContactStatus   @default(NEW)
  lastContactAt DateTime?
  avatarUrl     String?

  // === NOVOS CAMPOS PARA FUNIL DE LEADS ===
  
  // Gestão de funil
  leadStage          LeadStage      @default(NEW)
  leadScore          Int            @default(0)  // Score automático 0-100
  leadSource         String?        // "WhatsApp", "Site", "Indicação", etc.
  leadSourceDetails  String?        // Detalhes da fonte
  
  // Informações adicionais
  company            String?        // Empresa do contato
  position           String?        // Cargo
  budget             Decimal?       // Orçamento disponível
  timeline           String?        // Prazo desejado
  preferences        Json?          // Preferências estruturadas
  
  // Comportamento e engajamento
  interactionCount   Int            @default(0)  // Número de interações
  lastInteractionAt  DateTime?      // Última interação
  responseRate       Float?         // Taxa de resposta (0-1)
  engagementLevel    String?        // "LOW", "MEDIUM", "HIGH"
  
  // Qualificação e segmentação
  isQualified        Boolean        @default(false)
  qualificationNotes String?        // Notas da qualificação
  tags               String[]       // Tags personalizadas
  priority           String         @default("MEDIUM") // "LOW", "MEDIUM", "HIGH", "URGENT"
  
  // Controle de campanhas
  unsubscribed       Boolean        @default(false)
  unsubscribedAt     DateTime?
  optInWhatsApp      Boolean        @default(false)
  optInEmail         Boolean        @default(false)
  optInSMS          Boolean        @default(false)
  
  // Próximas ações
  nextFollowUpAt     DateTime?      // Próximo follow-up
  followUpReason     String?        // Motivo do follow-up

  agentId       String
  agent         User            @relation(fields: [agentId], references: [id])

  appointments  Appointment[]
  deals         Deal[]
  chats         Chat[]          @relation("ContactChat")

  // Novos relacionamentos para funil
  leadActivities     LeadActivity[]
  campaignParticipations MessageCampaignParticipation[]

  // Novos relacionamentos para módulo conexões
  whatsappMessages   WhatsAppMessage[] @relation("WhatsAppContactMessages")

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  @@index([leadStage, leadScore])
  @@index([agentId, leadStage])
  @@index([leadSource, createdAt])
  @@index([nextFollowUpAt])
}

model Appointment {
  id          String           @id @default(uuid())
  title       String
  description String?
  date        DateTime
  type        AppointmentType  @default(VISIT)
  status      AppointmentStatus @default(PENDING)

  agentId     String
  agent       User             @relation(fields: [agentId], references: [id])

  contactId   String
  contact     Contact          @relation(fields: [contactId], references: [id])

  propertyId  String?
  property    Property?        @relation(fields: [propertyId], references: [id])

  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // === NOVOS CAMPOS DE INTEGRAÇÃO ===
  
  // Google Calendar Sync
  googleCalendarEventId String?  @unique
  googleCalendarId      String?  // ID do calendário específico
  syncStatus           SyncStatus @default(PENDING)
  syncAttempts         Int       @default(0)
  lastSyncAt           DateTime?
  syncError            String?
  
  // n8n Integration
  n8nWorkflowId        String?   // ID do workflow que criou
  n8nExecutionId       String?   // ID da execução específica
  automationTrigger    AutomationTrigger?
  automationData       Json?     // dados para workflows
  
  // Smart Assignment
  autoAssigned         Boolean   @default(false)
  assignmentScore      Float?    // score do algoritmo de atribuição
  assignmentReason     String?   // razão da atribuição automática
  reassignmentCount    Int       @default(0)
  
  // Advanced Features  
  conflictResolved     Boolean   @default(false)
  conflictStrategy     ConflictStrategy?
  originalSlotId       String?   // slot original antes de conflito
  
  // Enhanced Metadata
  source              AppointmentSource @default(MANUAL)
  priority            AppointmentPriority @default(NORMAL)
  estimatedDuration   Int       @default(60) // minutos
  actualDuration      Int?      // minutos reais
  
  // Client Experience
  confirmationSent    Boolean   @default(false)
  remindersSent       Json?     // { "24h": true, "1h": false }
  clientFeedback      Json?     // feedback pós-agendamento
  reschedulingCount   Int       @default(0)
  
  // Novos relacionamentos
  availabilitySlotId  String?
  availabilitySlot    AvailabilitySlot? @relation(fields: [availabilitySlotId], references: [id])
  conflictLogs        AppointmentConflictLog[]
  syncLogs            CalendarSyncLog[]
  n8nExecutions       N8nExecutionLog[]
  leadActivities      LeadActivity[]    @relation("AppointmentActivity")

  @@index([syncStatus, lastSyncAt])
  @@index([source, createdAt])
  @@index([agentId, status, date])
}

model Deal {
  id                String    @id @default(uuid())
  title             String
  value             Decimal
  stage             DealStage @default(LEAD_IN)
  status            String    @default("ACTIVE")
  expectedCloseDate DateTime?
  closedAt          DateTime?

  propertyId        String
  property          Property  @relation(fields: [propertyId], references: [id])

  clientId          String
  client            Contact   @relation(fields: [clientId], references: [id])

  agentId           String
  agent             User      @relation(fields: [agentId], references: [id])

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Novos relacionamentos para módulo clientes
  leadActivities    LeadActivity[] @relation("DealActivity")
}

model Activity {
  id          String       @id @default(uuid())
  type        ActivityType
  description String
  entityId    String?
  entityType  String?

  userId      String
  user        User         @relation(fields: [userId], references: [id])

  createdAt   DateTime     @default(now())
}

model Chat {
  id         String   @id @default(uuid())
  contactId  String
  contact    Contact  @relation("ContactChat", fields: [contactId], references: [id])

  agentId    String
  agent      User     @relation("ChatOwner", fields: [agentId], references: [id])

  messages   Message[]

  // Novos relacionamentos para módulo conexões
  whatsappMessages WhatsAppMessage[] @relation("WhatsAppChatMessages")
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  content   String
  sentAt    DateTime @default(now())
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
}

// === NOVOS MODELOS PARA MÓDULO AGENDA ===

// Horários de trabalho dos corretores (estrutura otimizada)
model AgentSchedule {
  id        String   @id @default(uuid())
  agentId   String   @unique
  agent     User     @relation(fields: [agentId], references: [id])
  
  // Configuração semanal estruturada
  workingHours Json    // Schema validado: { monday: { start: "09:00", end: "18:00", breaks: [...] }, ... }
  timezone     String  @default("America/Sao_Paulo")
  isActive     Boolean @default(true)
  
  // Configurações avançadas
  bufferTime          Int     @default(15) // minutos entre agendamentos
  maxDailyAppointments Int?   @default(8)
  allowWeekendWork    Boolean @default(false)
  autoAssignEnabled   Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Slots de disponibilidade otimizados
model AvailabilitySlot {
  id          String   @id @default(uuid())
  agentId     String
  agent       User     @relation(fields: [agentId], references: [id])
  
  // Informações temporais
  date        DateTime @db.Date
  startTime   String   // "09:00" - formato HH:mm
  endTime     String   // "10:00" - formato HH:mm
  duration    Int      // duração em minutos
  
  // Status e controle
  status      SlotStatus @default(AVAILABLE)
  slotType    SlotType   @default(REGULAR)
  priority    Int        @default(0) // para ordenação inteligente
  
  // Relacionamentos
  appointments Appointment[]
  
  // Metadados para automação
  source         String?  // "manual", "google_calendar", "n8n", "auto_generated"
  externalId     String?  // ID do evento no sistema externo
  automationData Json?    // dados para workflows n8n
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([agentId, date, status])
  @@index([date, status, slotType])
}

// === MODELOS DE SINCRONIZAÇÃO GOOGLE CALENDAR ===

// Credenciais OAuth seguras por usuário
model GoogleCalendarCredentials {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  
  // Tokens OAuth criptografados
  accessToken       String    // Criptografado
  refreshToken      String    // Criptografado  
  tokenExpiry       DateTime
  scope            String     // escopos autorizados
  
  // Configurações
  defaultCalendarId String?   // calendário padrão
  watchChannelId    String?   // ID do canal de notificações
  watchExpiration   DateTime? // expiração do canal
  
  isActive         Boolean   @default(true)
  lastSyncAt       DateTime?
  syncErrors       Int       @default(0)
  
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  calendars        GoogleCalendarConfig[]
}

// Configuração por calendário
model GoogleCalendarConfig {
  id           String   @id @default(uuid())
  credentialId String
  credential   GoogleCalendarCredentials @relation(fields: [credentialId], references: [id])
  
  calendarId   String   // ID do calendário no Google
  calendarName String   // nome amigável
  color        String?  // cor hex
  isPrimary    Boolean  @default(false)
  isActive     Boolean  @default(true)
  
  // Configurações de sincronização
  syncDirection    SyncDirection @default(BIDIRECTIONAL)
  syncEvents       Boolean       @default(true)
  syncAvailability Boolean       @default(true)
  autoCreateSlots  Boolean       @default(true)
  
  // Filtros
  eventFilter      Json?         // filtros de eventos
  timeRange        Json?         // { start: "09:00", end: "18:00" }
  
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  
  @@unique([credentialId, calendarId])
}

// Log de sincronizações
model CalendarSyncLog {
  id              String   @id @default(uuid())
  appointmentId   String?
  appointment     Appointment? @relation(fields: [appointmentId], references: [id])
  
  operation       SyncOperation
  direction       SyncDirection
  status          SyncLogStatus
  
  googleEventId   String?
  googleCalendarId String?
  
  // Dados da operação
  requestData     Json?    // dados enviados
  responseData    Json?    // resposta recebida
  errorMessage    String?  // erro se houver
  
  // Métricas
  duration        Int?     // duração em ms
  retryCount      Int      @default(0)
  
  createdAt       DateTime @default(now())
  
  @@index([status, createdAt])
  @@index([operation, direction])
}

// Resolução de conflitos
model AppointmentConflictLog {
  id              String   @id @default(uuid())
  appointmentId   String
  appointment     Appointment @relation(fields: [appointmentId], references: [id])
  
  conflictType    ConflictType
  conflictSource  ConflictSource
  
  // Dados do conflito
  originalData    Json     // dados originais
  conflictingData Json     // dados conflitantes
  resolvedData    Json?    // dados após resolução
  
  strategy        ConflictStrategy
  resolution      ConflictResolution
  
  resolvedBy      String?  // ID do usuário que resolveu
  resolvedAt      DateTime?
  
  createdAt       DateTime @default(now())
}

// === MODELOS N8N INTEGRATION ===

// Configuração de workflows n8n
model N8nWorkflowConfig {
  id           String   @id @default(uuid())
  name         String
  description  String?
  workflowId   String   @unique // ID no n8n
  
  // Configuração
  isActive     Boolean  @default(true)
  triggerType  N8nTriggerType
  webhookUrl   String?  // URL do webhook se aplicável
  
  // Contexto
  companyId    String?
  company      Company? @relation(fields: [companyId], references: [id])
  agentId      String?
  agent        User?    @relation(fields: [agentId], references: [id])
  
  // Configurações
  settings     Json?    // configurações específicas
  mapping      Json?    // mapeamento de campos
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  executions   N8nExecutionLog[]
}

// Log de execuções n8n
model N8nExecutionLog {
  id              String   @id @default(uuid())
  workflowConfigId String
  workflowConfig  N8nWorkflowConfig @relation(fields: [workflowConfigId], references: [id])
  
  executionId     String   // ID da execução no n8n
  status          N8nExecutionStatus
  
  // Dados da execução
  inputData       Json?    // dados de entrada
  outputData      Json?    // dados de saída
  errorData       Json?    // dados de erro
  
  // Métricas
  startedAt       DateTime
  finishedAt      DateTime?
  duration        Int?     // duração em ms
  
  // Contexto
  appointmentId   String?
  appointment     Appointment? @relation(fields: [appointmentId], references: [id])
  
  createdAt       DateTime @default(now())
}

// === NOVOS MODELOS PARA MÓDULO CLIENTES ===

// Campanhas de mensagens automatizadas
model MessageCampaign {
  id          String         @id @default(uuid())
  name        String         // Nome da campanha
  description String?        // Descrição
  
  // Configuração da campanha
  channel     String         // "WHATSAPP", "EMAIL", "SMS"
  status      CampaignStatus @default(DRAFT)
  
  // Conteúdo
  subject     String?        // Assunto (para email)
  template    String         // Template da mensagem
  variables   Json?          // Variáveis disponíveis no template
  
  // Agendamento
  scheduledAt DateTime?      // Data/hora agendada
  startedAt   DateTime?      // Quando iniciou
  completedAt DateTime?      // Quando terminou
  
  // Configurações
  targetCriteria Json?       // Critérios de segmentação
  sendDelay      Int?        // Delay entre envios (segundos)
  maxRecipients  Int?        // Máximo de destinatários
  
  // Estatísticas
  totalRecipients   Int      @default(0)
  sentCount        Int       @default(0)
  deliveredCount   Int       @default(0)
  readCount        Int       @default(0)
  responseCount    Int       @default(0)
  errorCount       Int       @default(0)
  
  // Relacionamentos
  createdById  String
  createdBy    User     @relation("CampaignCreator", fields: [createdById], references: [id])
  
  participants MessageCampaignParticipation[]
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([status, scheduledAt])
  @@index([channel, status])
}

// Participação em campanhas (many-to-many entre Contact e MessageCampaign)
model MessageCampaignParticipation {
  id           String   @id @default(uuid())
  
  campaignId   String
  campaign     MessageCampaign @relation(fields: [campaignId], references: [id])
  
  contactId    String
  contact      Contact  @relation(fields: [contactId], references: [id])
  
  // Status da participação
  status       String   @default("PENDING") // "PENDING", "SENT", "DELIVERED", "READ", "RESPONDED", "FAILED"
  sentAt       DateTime?
  deliveredAt  DateTime?
  readAt       DateTime?
  respondedAt  DateTime?
  
  // Dados da mensagem
  messageId    String?  // ID externo da mensagem
  errorMessage String?  // Erro se houver
  
  // Personalização
  personalizedContent String? // Conteúdo personalizado
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@unique([campaignId, contactId])
  @@index([status, sentAt])
}

// Atividades dos leads (histórico de interações)
model LeadActivity {
  id          String           @id @default(uuid())
  
  contactId   String
  contact     Contact          @relation(fields: [contactId], references: [id])
  
  // Dados da atividade
  type        LeadActivityType
  title       String           // Título da atividade
  description String?          // Descrição detalhada
  
  // Contexto
  direction   String?          // "INBOUND", "OUTBOUND"
  channel     String?          // Canal da comunicação
  duration    Int?             // Duração em minutos (para calls/meetings)
  
  // Resultado
  outcome     String?          // Resultado da atividade
  nextAction  String?          // Próxima ação sugerida
  
  // Dados estruturados
  metadata    Json?            // Dados adicionais estruturados
  
  // Relacionamentos
  performedById String?        // Quem realizou a atividade
  performedBy   User?          @relation("ActivityPerformer", fields: [performedById], references: [id])
  
  appointmentId String?        // Relacionado a um agendamento
  appointment   Appointment?   @relation("AppointmentActivity", fields: [appointmentId], references: [id])
  
  dealId        String?        // Relacionado a um negócio
  deal          Deal?          @relation("DealActivity", fields: [dealId], references: [id])
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@index([contactId, type, createdAt])
  @@index([performedById, createdAt])
  @@index([type, createdAt])
}

// === NOVOS MODELOS PARA MÓDULO CONEXÕES ===

// Instâncias WhatsApp por corretor
model WhatsAppInstance {
  id          String   @id @default(uuid())
  agentId     String
  agent       User     @relation("AgentWhatsAppInstances", fields: [agentId], references: [id])
  
  // Identificação da instância
  instanceId  String   @unique
  phoneNumber String?
  displayName String?
  
  // Status e controle
  status      WhatsAppStatus @default(DISCONNECTED)
  qrCode      String?
  qrCodeExpiry DateTime?
  
  // Configurações
  autoReply   Boolean  @default(false)
  autoReplyMessage String?
  webhookUrl  String?
  
  // Permissões e controle
  isActive    Boolean  @default(true)
  canConnect  Boolean  @default(true)
  maxDailyMessages Int? @default(1000)
  
  // Estatísticas
  lastConnectionAt DateTime?
  messagesSentToday Int @default(0)
  messagesReceivedToday Int @default(0)
  totalMessagesSent Int @default(0)
  totalMessagesReceived Int @default(0)
  
  // Relacionamentos
  connectionLogs WhatsAppConnectionLog[]
  messages       WhatsAppMessage[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([agentId])
  @@index([status, isActive])
  @@index([phoneNumber])
}

// Log de conexões WhatsApp
model WhatsAppConnectionLog {
  id          String   @id @default(uuid())
  instanceId  String
  instance    WhatsAppInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  
  // Dados da ação
  action      ConnectionAction
  status      String
  errorMessage String?
  
  // Metadados
  metadata    Json?    // Dados adicionais da operação
  ipAddress   String?  // IP de onde veio a conexão
  userAgent   String?  // User agent se aplicável
  
  // Métricas
  duration    Int?     // Duração da operação em ms
  retryCount  Int      @default(0)
  
  createdAt   DateTime @default(now())
  
  @@index([instanceId, action, createdAt])
  @@index([status, createdAt])
}

// Mensagens WhatsApp (extensão do sistema de chats)
model WhatsAppMessage {
  id          String   @id @default(uuid())
  instanceId  String
  instance    WhatsAppInstance @relation(fields: [instanceId], references: [id])
  
  // Identificação da mensagem
  whatsappMessageId String @unique
  conversationId    String // ID da conversa no WhatsApp
  
  // Dados da mensagem
  messageType MessageType @default(TEXT)
  content     String
  caption     String?     // Para imagens/vídeos
  
  // Participantes
  fromNumber  String      // Número que enviou
  toNumber    String      // Número que recebeu
  isFromMe    Boolean     // Se foi enviada pela instância
  
  // Status
  messageStatus String    // sent, delivered, read, failed
  timestamp     DateTime  // Timestamp original do WhatsApp
  
  // Relacionamentos (opcional - para integrar com sistema de chats existente)
  chatId        String?
  chat          Chat?     @relation("WhatsAppChatMessages", fields: [chatId], references: [id])
  
  contactId     String?   // Se identificado como um contato do sistema
  contact       Contact?  @relation("WhatsAppContactMessages", fields: [contactId], references: [id])
  
  // Metadados
  metadata      Json?     // Dados adicionais (localização, contato, etc.)
  mediaUrl      String?   // URL do arquivo de mídia se aplicável
  mediaSize     Int?      // Tamanho do arquivo em bytes
  mediaMimeType String?   // Tipo MIME do arquivo
  
  // Flags de processamento
  isProcessed   Boolean   @default(false) // Se foi processada por automações
  isAutoReply   Boolean   @default(false) // Se foi uma resposta automática
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([instanceId, timestamp])
  @@index([conversationId, timestamp])
  @@index([fromNumber, timestamp])
  @@index([messageStatus, timestamp])
  @@index([isProcessed, createdAt])
}

// Configurações globais do WhatsApp
model WhatsAppConfig {
  id          String   @id @default(uuid())
  companyId   String   @unique
  company     Company  @relation("CompanyWhatsAppConfig", fields: [companyId], references: [id])
  
  // Configurações gerais
  maxInstancesPerAgent Int     @default(1)
  autoQRRefresh       Boolean @default(true)
  qrRefreshInterval   Int     @default(300) // segundos
  
  // Configurações de mensagens
  messageRateLimit    Int     @default(20)  // mensagens por minuto
  autoReplyEnabled    Boolean @default(false)
  webhookSecret       String? // Secret para validar webhooks
  
  // Integrações
  n8nWebhookUrl       String? // URL do webhook n8n
  enableN8nIntegration Boolean @default(false)
  
  // Configurações de segurança
  allowedIPs          String[] // IPs permitidos para conexão
  requireIPWhitelist  Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}