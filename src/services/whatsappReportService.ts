import { WhatsAppService } from './whatsappService';
import { TemplateEngineService } from './templateEngineService';

// ===================================================================
// TIPOS E INTERFACES
// ===================================================================

export interface WhatsAppReportMessage {
  recipient: string; // N√∫mero do destinat√°rio
  content: string;   // Conte√∫do formatado para WhatsApp
  mediaUrl?: string; // URL de m√≠dia (PDF, imagem) se houver
  mediaType?: 'image' | 'document' | 'video';
}

export interface BulkReportData {
  instanceId: string;
  messages: WhatsAppReportMessage[];
  scheduleId?: string;
  reportType: string;
}

export interface BulkSendResult {
  total: number;
  sent: number;
  failed: number;
  errors: Array<{
    recipient: string;
    error: string;
  }>;
}

export interface MediaMessage {
  type: 'document' | 'image';
  url: string;
  filename?: string;
  caption?: string;
}

// ===================================================================
// WHATSAPP REPORT SERVICE
// ===================================================================

export class WhatsAppReportService extends WhatsAppService {

  // ===================================================================
  // ENVIO DE RELAT√ìRIOS
  // ===================================================================

  /**
   * Enviar relat√≥rio para um destinat√°rio espec√≠fico
   */
  static async sendReport(
    instanceId: string,
    recipient: string, 
    report: { content: string; mediaUrl?: string; mediaType?: string }
  ): Promise<void> {
    try {
      // Verificar inst√¢ncia ativa
      const instance = await this.getInstanceById(instanceId);
      if (!instance || instance.status !== 'CONNECTED') {
        throw new Error('Inst√¢ncia WhatsApp n√£o est√° conectada');
      }

      // Enviar mensagem de texto
      if (report.content) {
        await this.sendMessage(instanceId, {
          to: recipient,
          type: 'text',
          content: report.content
        });
      }

      // Enviar m√≠dia se houver
      if (report.mediaUrl && report.mediaType) {
        const mediaMessage = this.createWhatsAppMediaMessage(
          report.mediaUrl, 
          report.mediaType as any
        );
        
        await this.sendMessage(instanceId, {
          to: recipient,
          type: report.mediaType as any,
          ...mediaMessage
        });
      }

      // Log da opera√ß√£o
      await this.logMessageSent(instanceId, recipient, 'report', {
        hasMedia: !!report.mediaUrl,
        mediaType: report.mediaType
      });

    } catch (error) {
      console.error('Erro ao enviar relat√≥rio via WhatsApp:', error);
      throw new Error(`Falha no envio: ${error instanceof Error ? error.message : 'Erro desconhecido'}`);
    }
  }

  /**
   * Enviar relat√≥rios em lote
   */
  static async sendBulkReports(reports: BulkReportData[]): Promise<BulkSendResult[]> {
    const results: BulkSendResult[] = [];

    for (const reportBatch of reports) {
      const batchResult: BulkSendResult = {
        total: reportBatch.messages.length,
        sent: 0,
        failed: 0,
        errors: []
      };

      for (const message of reportBatch.messages) {
        try {
          await this.sendReport(reportBatch.instanceId, message.recipient, {
            content: message.content,
            mediaUrl: message.mediaUrl,
            mediaType: message.mediaType
          });

          batchResult.sent++;

          // Delay entre mensagens para evitar rate limiting
          await this.delay(1000);

        } catch (error) {
          batchResult.failed++;
          batchResult.errors.push({
            recipient: message.recipient,
            error: error instanceof Error ? error.message : 'Erro desconhecido'
          });
        }
      }

      results.push(batchResult);
    }

    return results;
  }

  // ===================================================================
  // FORMATA√á√ÉO ESPEC√çFICA PARA WHATSAPP
  // ===================================================================

  /**
   * Formatar dados de relat√≥rio para WhatsApp
   */
  static async formatReportForWhatsApp(data: any): Promise<WhatsAppReportMessage> {
    // Usar o TemplateEngineService para renderizar para WhatsApp
    const content = await TemplateEngineService.renderForWhatsApp(data);

    return {
      recipient: '', // Ser√° preenchido pelo caller
      content,
      // Adicionar m√≠dia se necess√°rio
      mediaUrl: data.pdfUrl,
      mediaType: data.pdfUrl ? 'document' : undefined
    };
  }

  /**
   * Criar mensagem de m√≠dia para WhatsApp
   */
  static createWhatsAppMediaMessage(
    mediaUrl: string, 
    mediaType: 'image' | 'document' | 'video',
    filename?: string,
    caption?: string
  ): MediaMessage {
    return {
      type: mediaType,
      url: mediaUrl,
      filename: filename || this.generateFilename(mediaType),
      caption
    };
  }

  // ===================================================================
  // TEMPLATES ESPEC√çFICOS PARA WHATSAPP
  // ===================================================================

  /**
   * Template para relat√≥rio semanal de vendas
   */
  static formatWeeklySalesReport(data: any): string {
    let message = `üìä *RELAT√ìRIO SEMANAL DE VENDAS*\n`;
    message += `${data.companyName || 'ImobiPRO'}\n\n`;
    
    message += `üí∞ *VENDAS DA SEMANA*\n`;
    message += `‚Ä¢ Total: ${this.formatCurrency(data.totalSales || 0)}\n`;
    message += `‚Ä¢ Quantidade: ${data.salesCount || 0} vendas\n`;
    message += `‚Ä¢ Ticket m√©dio: ${this.formatCurrency(data.averageValue || 0)}\n`;
    
    if (data.growthRate !== undefined) {
      const growthEmoji = data.growthRate >= 0 ? 'üìà' : 'üìâ';
      message += `‚Ä¢ Crescimento: ${growthEmoji} ${data.growthRate.toFixed(1)}%\n`;
    }
    
    message += `\n`;
    
    if (data.topAgent?.name) {
      message += `üèÜ *DESTAQUE DA SEMANA*\n`;
      message += `‚Ä¢ ${data.topAgent.name}\n`;
      if (data.topAgent.salesCount) {
        message += `‚Ä¢ ${data.topAgent.salesCount} vendas realizadas\n`;
      }
      message += `\n`;
    }
    
    message += `üìÖ *Per√≠odo:* ${data.periodStart} - ${data.periodEnd}\n`;
    message += `üïê *Gerado em:* ${data.generatedAt}\n\n`;
    message += `‚ú® _Relat√≥rio autom√°tico do ImobiPRO_`;
    
    return message;
  }

  /**
   * Template para relat√≥rio de leads
   */
  static formatLeadConversionReport(data: any): string {
    let message = `üéØ *RELAT√ìRIO DE LEADS*\n`;
    message += `${data.companyName || 'ImobiPRO'}\n\n`;
    
    message += `üìà *CONVERS√ÉO DE LEADS*\n`;
    message += `‚Ä¢ Total: ${data.totalLeads || 0} leads\n`;
    message += `‚Ä¢ Novos: ${data.newLeads || 0} leads\n`;
    message += `‚Ä¢ Convertidos: ${data.convertedLeads || 0} leads\n`;
    message += `‚Ä¢ Taxa de convers√£o: ${data.conversionRate?.toFixed(1) || 0}%\n\n`;
    
    if (data.leadSources?.length) {
      message += `üåê *PRINCIPAIS FONTES*\n`;
      data.leadSources.slice(0, 3).forEach((source: any) => {
        message += `‚Ä¢ ${source.source}: ${source.count} (${source.percentage.toFixed(1)}%)\n`;
      });
      message += `\n`;
    }
    
    message += `üìÖ *Per√≠odo:* ${data.periodStart} - ${data.periodEnd}\n`;
    message += `üïê *Gerado em:* ${data.generatedAt}\n\n`;
    message += `‚ú® _Relat√≥rio autom√°tico do ImobiPRO_`;
    
    return message;
  }

  /**
   * Template para relat√≥rio de agendamentos
   */
  static formatAppointmentSummaryReport(data: any): string {
    let message = `üìÖ *RELAT√ìRIO DE AGENDAMENTOS*\n`;
    message += `${data.companyName || 'ImobiPRO'}\n\n`;
    
    message += `üìû *AGENDAMENTOS DA SEMANA*\n`;
    message += `‚Ä¢ Total: ${data.totalAppointments || 0} agendamentos\n`;
    message += `‚Ä¢ Realizados: ${data.completedAppointments || 0} agendamentos\n`;
    message += `‚Ä¢ Cancelados: ${data.canceledAppointments || 0} agendamentos\n`;
    message += `‚Ä¢ Taxa de conclus√£o: ${data.completionRate?.toFixed(1) || 0}%\n`;
    
    if (data.averageDuration) {
      message += `‚Ä¢ Dura√ß√£o m√©dia: ${data.averageDuration} minutos\n`;
    }
    
    message += `\n`;
    
    message += `üìÖ *Per√≠odo:* ${data.periodStart} - ${data.periodEnd}\n`;
    message += `üïê *Gerado em:* ${data.generatedAt}\n\n`;
    message += `‚ú® _Relat√≥rio autom√°tico do ImobiPRO_`;
    
    return message;
  }

  // ===================================================================
  // INTEGRA√á√ÉO COM SISTEMA EXISTENTE
  // ===================================================================

  /**
   * Enviar relat√≥rio usando inst√¢ncia padr√£o do agente
   */
  static async sendReportToAgent(
    agentId: string, 
    recipient: string, 
    reportData: any
  ): Promise<void> {
    try {
      // Buscar inst√¢ncia ativa do agente
      const instance = await this.getAgentActiveInstance(agentId);
      if (!instance) {
        throw new Error('Agente n√£o possui inst√¢ncia WhatsApp ativa');
      }

      // Formatar relat√≥rio
      const formattedReport = await this.formatReportForWhatsApp(reportData);

      // Enviar
      await this.sendReport(instance.id, recipient, {
        content: formattedReport.content,
        mediaUrl: formattedReport.mediaUrl,
        mediaType: formattedReport.mediaType
      });

    } catch (error) {
      console.error(`Erro ao enviar relat√≥rio para agente ${agentId}:`, error);
      throw error;
    }
  }

  /**
   * Configurar envio autom√°tico semanal
   */
  static async setupWeeklyReports(config: {
    agentId: string;
    recipients: string[];
    reportTypes: string[];
    dayOfWeek: number; // 0 = domingo, 1 = segunda...
    hour: number;
  }): Promise<void> {
    // Esta fun√ß√£o seria integrada com um sistema de cron jobs
    // Por exemplo, usando node-cron ou integrando com n8n
    
    console.log('Configurando relat√≥rios semanais:', config);
    
    // Em produ√ß√£o, registrar no sistema de agendamento
    // await this.registerWeeklySchedule(config);
  }

  // ===================================================================
  // UTILIT√ÅRIOS PRIVADOS
  // ===================================================================

  private static async getAgentActiveInstance(agentId: string) {
    // Buscar inst√¢ncia ativa do agente no banco
    // Implementa√ß√£o seria similar ao WhatsAppService existente
    const instances = await this.getInstancesByAgent(agentId);
    return instances.find(instance => instance.status === 'CONNECTED');
  }

  private static async logMessageSent(
    instanceId: string, 
    recipient: string, 
    type: string, 
    metadata: any
  ): Promise<void> {
    // Log da mensagem enviada
    console.log('Relat√≥rio enviado:', {
      instanceId,
      recipient,
      type,
      metadata,
      timestamp: new Date().toISOString()
    });
  }

  private static delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  private static generateFilename(mediaType: string): string {
    const timestamp = new Date().toISOString().split('T')[0];
    const extensions = {
      document: 'pdf',
      image: 'png',
      video: 'mp4'
    };
    
    return `relatorio_${timestamp}.${extensions[mediaType as keyof typeof extensions] || 'pdf'}`;
  }

  private static formatCurrency(value: number): string {
    return new Intl.NumberFormat('pt-BR', {
      style: 'currency',
      currency: 'BRL'
    }).format(value);
  }

  // ===================================================================
  // WEBHOOK HANDLERS
  // ===================================================================

  /**
   * Handler para webhook de status de mensagem
   */
  static async handleMessageStatusWebhook(payload: {
    messageId: string;
    status: 'sent' | 'delivered' | 'read' | 'failed';
    timestamp: string;
  }): Promise<void> {
    try {
      // Atualizar status da mensagem no banco
      console.log('Status atualizado:', payload);
      
      // Em produ√ß√£o, atualizar ReportHistory
      // await this.updateReportMessageStatus(payload);

    } catch (error) {
      console.error('Erro ao processar webhook de status:', error);
    }
  }

  /**
   * Handler para respostas autom√°ticas em relat√≥rios
   */
  static async handleReportResponseWebhook(payload: {
    from: string;
    message: string;
    instanceId: string;
  }): Promise<void> {
    try {
      // Detectar se √© resposta a um relat√≥rio
      const isReportResponse = this.detectReportResponse(payload.message);
      
      if (isReportResponse) {
        // Processar resposta (ex: solicitar detalhes, agendar reuni√£o)
        await this.processReportResponse(payload);
      }

    } catch (error) {
      console.error('Erro ao processar resposta de relat√≥rio:', error);
    }
  }

  private static detectReportResponse(message: string): boolean {
    const reportKeywords = [
      'relat√≥rio', 'detalhes', 'mais informa√ß√µes',
      'reuni√£o', 'apresenta√ß√£o', 'n√∫meros'
    ];
    
    return reportKeywords.some(keyword => 
      message.toLowerCase().includes(keyword)
    );
  }

  private static async processReportResponse(payload: {
    from: string;
    message: string;
    instanceId: string;
  }): Promise<void> {
    // Implementar l√≥gica de resposta autom√°tica
    // Por exemplo, agendar reuni√£o ou enviar detalhes adicionais
    
    const responseMessage = `Obrigado pelo interesse no relat√≥rio! üìä\n\n` +
      `Nossa equipe entrar√° em contato para fornecer mais detalhes.\n\n` +
      `_Mensagem autom√°tica do ImobiPRO_`;

    await this.sendMessage(payload.instanceId, {
      to: payload.from,
      type: 'text',
      content: responseMessage
    });
  }
}