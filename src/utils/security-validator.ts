// -----------------------------------------------------------
// Validador de Seguran√ßa para Build e Runtime
// -----------------------------------------------------------

import React from 'react';

/**
 * Valida√ß√µes cr√≠ticas de seguran√ßa que devem ser executadas
 * antes do build e durante a inicializa√ß√£o da aplica√ß√£o
 */

export interface SecurityValidationResult {
  isValid: boolean;
  criticalErrors: string[];
  warnings: string[];
  recommendations: string[];
}

/**
 * Executa todas as valida√ß√µes de seguran√ßa
 */
export const validateSecurity = (): SecurityValidationResult => {
  const result: SecurityValidationResult = {
    isValid: true,
    criticalErrors: [],
    warnings: [],
    recommendations: []
  };

  // 1. Validar configura√ß√£o de autentica√ß√£o
  validateAuthSecurity(result);

  // 2. Validar vari√°veis de ambiente
  validateEnvironmentSecurity(result);

  // 3. Validar exposi√ß√£o de dados sens√≠veis
  validateDataExposure(result);

  // 4. Validar configura√ß√£o de produ√ß√£o
  validateProductionSecurity(result);

  // 5. Validar roles e permiss√µes
  validateRolesSecurity(result);

  // Determinar se √© v√°lido (sem erros cr√≠ticos)
  result.isValid = result.criticalErrors.length === 0;

  return result;
};

/**
 * Validar seguran√ßa da autentica√ß√£o
 */
function validateAuthSecurity(result: SecurityValidationResult): void {
  const isProd = import.meta.env.PROD;
  const useRealAuth = import.meta.env.VITE_USE_REAL_AUTH === 'true';
  const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
  const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

  // CR√çTICO: N√£o permitir mock em produ√ß√£o
  if (isProd && !useRealAuth) {
    result.criticalErrors.push(
      'CR√çTICO: Autentica√ß√£o mock est√° ativa em produ√ß√£o. ' +
      'Configure VITE_USE_REAL_AUTH=true'
    );
  }

  // CR√çTICO: Credenciais obrigat√≥rias em produ√ß√£o
  if (isProd && useRealAuth) {
    if (!supabaseUrl) {
      result.criticalErrors.push('CR√çTICO: VITE_SUPABASE_URL n√£o configurada em produ√ß√£o');
    }
    if (!supabaseKey) {
      result.criticalErrors.push('CR√çTICO: VITE_SUPABASE_ANON_KEY n√£o configurada em produ√ß√£o');
    }
  }

  // Validar formato das credenciais
  if (supabaseUrl && !supabaseUrl.startsWith('https://')) {
    result.criticalErrors.push('CR√çTICO: VITE_SUPABASE_URL deve usar HTTPS');
  }

  if (supabaseKey && supabaseKey.split('.').length !== 3) {
    result.criticalErrors.push('CR√çTICO: VITE_SUPABASE_ANON_KEY n√£o √© um JWT v√°lido');
  }

  // Debug em produ√ß√£o
  if (isProd && import.meta.env.VITE_DEBUG_AUTH === 'true') {
    result.warnings.push('‚ö†Ô∏è  Debug de autentica√ß√£o ativo em produ√ß√£o');
  }
}

/**
 * Validar seguran√ßa das vari√°veis de ambiente
 */
function validateEnvironmentSecurity(result: SecurityValidationResult): void {
  const isProd = import.meta.env.PROD;

  // Verificar se vari√°veis sens√≠veis n√£o est√£o expostas no frontend
  const sensitiveVars = [
    'SUPABASE_SERVICE_ROLE_KEY',
    'DATABASE_URL',
    'VITE_GOOGLE_CLIENT_SECRET'
  ];

  sensitiveVars.forEach(varName => {
    if ((import.meta.env as any)[varName]) {
      result.criticalErrors.push(
        `CR√çTICO: Vari√°vel sens√≠vel ${varName} exposta no frontend`
      );
    }
  });

  // Verificar URLs com credenciais hardcoded
  const databaseUrl = import.meta.env.DATABASE_URL;
  if (databaseUrl && databaseUrl.includes('password') && isProd) {
    result.warnings.push('‚ö†Ô∏è  DATABASE_URL cont√©m credenciais em texto plano');
  }

  // Verificar IDs hardcoded
  const hardcodedIds = [
    'mock-user-id',
    'mock-company-id',
    'eeceyvenrnyyqvilezgr' // ID espec√≠fico do projeto
  ];

  const envString = JSON.stringify(import.meta.env);
  hardcodedIds.forEach(id => {
    if (envString.includes(id) && isProd) {
      result.warnings.push(`‚ö†Ô∏è  ID hardcoded encontrado: ${id}`);
    }
  });
}

/**
 * Validar exposi√ß√£o de dados sens√≠veis
 */
function validateDataExposure(result: SecurityValidationResult): void {
  // Verificar se dados mock podem vazar
  if (typeof window !== 'undefined') {
    // Verificar localStorage com dados sens√≠veis
    try {
      const localStorage = window.localStorage;
      const keys = Object.keys(localStorage);
      
      keys.forEach(key => {
        if (key.includes('mock') || key.includes('test') || key.includes('dev')) {
          if (import.meta.env.PROD) {
            result.warnings.push(`‚ö†Ô∏è  Dados de desenvolvimento em localStorage: ${key}`);
          }
        }
      });
    } catch (e) {
      // Ignorar erros de acesso ao localStorage
    }

    // Verificar se AuthContextMock est√° dispon√≠vel globalmente
    if ((window as any).AuthContextMock || (window as any).__AUTH_MOCK__) {
      result.criticalErrors.push('CR√çTICO: AuthContextMock exposto globalmente');
    }
  }
}

/**
 * Validar configura√ß√£o espec√≠fica de produ√ß√£o
 */
function validateProductionSecurity(result: SecurityValidationResult): void {
  const isProd = import.meta.env.PROD;

  if (isProd) {
    // Verificar se todas as configura√ß√µes necess√°rias est√£o definidas
    const requiredProdVars = [
      'VITE_SUPABASE_URL',
      'VITE_SUPABASE_ANON_KEY'
    ];

    requiredProdVars.forEach(varName => {
      if (!import.meta.env[varName]) {
        result.criticalErrors.push(`CR√çTICO: ${varName} obrigat√≥ria em produ√ß√£o`);
      }
    });

    // Verificar configura√ß√µes inseguras
    if (import.meta.env.MODE === 'development') {
      result.criticalErrors.push('CR√çTICO: Modo development ativo em build de produ√ß√£o');
    }

    // Verificar HTTPS
    if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost') {
      result.warnings.push('‚ö†Ô∏è  Aplica√ß√£o n√£o est√° sendo servida via HTTPS');
    }
  }

  // Recomenda√ß√µes gerais
  result.recommendations.push('‚úÖ Configure Content Security Policy headers');
  result.recommendations.push('‚úÖ Implemente rate limiting nas APIs');
  result.recommendations.push('‚úÖ Configure monitoramento de seguran√ßa');
}

/**
 * Validar roles e hierarquia de permiss√µes
 */
function validateRolesSecurity(result: SecurityValidationResult): void {
  // Verificar se roles deprecados n√£o est√£o sendo usados
  const deprecatedRoles = ['PROPRIETARIO', 'CREATOR'];
  
  // Esta verifica√ß√£o seria feita em runtime com dados reais
  // Por enquanto, apenas avisar sobre a exist√™ncia de roles deprecados
  result.recommendations.push('‚úÖ Remover todas as refer√™ncias aos roles: ' + deprecatedRoles.join(', '));
  
  // Verificar configura√ß√µes padr√£o perigosas
  const defaultUserRole = import.meta.env.VITE_DEFAULT_USER_ROLE;
  if (defaultUserRole === 'DEV_MASTER' || defaultUserRole === 'ADMIN') {
    result.criticalErrors.push(
      `CR√çTICO: Role padr√£o perigoso configurado: ${defaultUserRole}`
    );
  }
}

/**
 * Executar valida√ß√µes apenas cr√≠ticas (para build)
 */
export const validateCriticalSecurity = (): boolean => {
  const result = validateSecurity();
  
  if (!result.isValid) {
    console.error('üîí FALHAS CR√çTICAS DE SEGURAN√áA DETECTADAS:');
    result.criticalErrors.forEach(error => console.error(`‚ùå ${error}`));
    
    if (import.meta.env.PROD) {
      throw new Error(
        'Build cancelado devido a falhas cr√≠ticas de seguran√ßa. ' +
        'Corrija os problemas listados acima antes de continuar.'
      );
    }
  }

  if (result.warnings.length > 0) {
    console.warn('üîí AVISOS DE SEGURAN√áA:');
    result.warnings.forEach(warning => console.warn(warning));
  }

  if (result.recommendations.length > 0) {
    console.info('üîí RECOMENDA√á√ïES DE SEGURAN√áA:');
    result.recommendations.forEach(rec => console.info(rec));
  }

  return result.isValid;
};

/**
 * Hook para valida√ß√£o cont√≠nua durante desenvolvimento
 */
export const useSecurityValidator = () => {
  React.useEffect(() => {
    if (import.meta.env.DEV) {
      const result = validateSecurity();
      
      if (!result.isValid || result.warnings.length > 0) {
        console.group('üîí RELAT√ìRIO DE SEGURAN√áA');
        
        if (result.criticalErrors.length > 0) {
          console.error('Erros cr√≠ticos:');
          result.criticalErrors.forEach(error => console.error(`‚ùå ${error}`));
        }
        
        if (result.warnings.length > 0) {
          console.warn('Avisos:');
          result.warnings.forEach(warning => console.warn(warning));
        }
        
        if (result.recommendations.length > 0) {
          console.info('Recomenda√ß√µes:');
          result.recommendations.forEach(rec => console.info(rec));
        }
        
        console.groupEnd();
      }
    }
  }, []);

  return validateCriticalSecurity();
};

// Executar valida√ß√£o na inicializa√ß√£o (apenas em produ√ß√£o)
if (import.meta.env.PROD) {
  validateCriticalSecurity();
}

export default {
  validateSecurity,
  validateCriticalSecurity,
  useSecurityValidator
};